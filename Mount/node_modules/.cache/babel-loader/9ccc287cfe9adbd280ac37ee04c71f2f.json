{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\NehaBadhan\\\\Desktop\\\\RealTime\\\\Mount\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\NehaBadhan\\\\Desktop\\\\RealTime\\\\Mount\\\\src\\\\Components\\\\GroupTransformation.js\";\n\n/** POC for three-fiber and cannon (a 3d physics lib)\r\n *\r\n *  useCannon is a custom hook that lets you link a physics body to a threejs\r\n *  mesh with zero effort. It will automatically update the mesh with the\r\n *  correct positioning.\r\n *\r\n *  When components with useCannon mount they are known to cannons world, when\r\n *  they unmount, they'll remove themselves from physics processing.\r\n *\r\n *  Check out three-fiber here: https://github.com/drcmda/react-three-fiber\r\n */\nimport * as CANNON from 'cannon';\nimport ReactDOM from 'react-dom';\nimport React, { useEffect, useState } from 'react';\nimport { Canvas } from 'react-three-fiber';\nimport { useCannon, Provider } from './useCannon';\nimport './styles.css';\n\nfunction Plane({\n  position\n}) {\n  // Register plane as a physics body with zero mass\n  const ref = useCannon({\n    mass: 0\n  }, body => {\n    body.addShape(new CANNON.Plane());\n    body.position.set(...position);\n  });\n  return React.createElement(\"mesh\", {\n    ref: ref,\n    receiveShadow: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(\"planeBufferGeometry\", {\n    attach: \"geometry\",\n    args: [1000, 1000],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }), React.createElement(\"meshPhongMaterial\", {\n    attach: \"material\",\n    color: \"#272727\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }));\n}\n\nfunction Box({\n  position\n}) {\n  // Register box as a physics body with mass\n  const ref = useCannon({\n    mass: 100000\n  }, body => {\n    body.addShape(new CANNON.Box(new CANNON.Vec3(1, 1, 1)));\n    body.position.set(...position);\n  });\n  return React.createElement(\"mesh\", {\n    ref: ref,\n    castShadow: true,\n    receiveShadow: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(\"boxGeometry\", {\n    attach: \"geometry\",\n    args: [2, 2, 2],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }), React.createElement(\"meshStandardMaterial\", {\n    attach: \"material\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }));\n}\n\nexport default function App() {\n  const _useState = useState(true),\n        _useState2 = _slicedToArray(_useState, 2),\n        showPlane = _useState2[0],\n        set = _useState2[1]; // When React removes (unmounts) the upper plane after 5 sec, objects should drop ...\n  // This may seem like magic, but as the plane unmounts it removes itself from cannon and that's that\n\n\n  useEffect(() => void setTimeout(() => set(false), 5000), []);\n  return React.createElement(Canvas, {\n    className: \"main\",\n    shadowMap: true,\n    camera: {\n      position: [0, 0, 15]\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(\"ambientLight\", {\n    intensity: 0.5,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }), React.createElement(\"spotLight\", {\n    intensity: 0.6,\n    position: [30, 30, 50],\n    angle: 0.2,\n    penumbra: 1,\n    castShadow: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }), React.createElement(Provider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(Plane, {\n    position: [0, 0, -10],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }), showPlane && React.createElement(Plane, {\n    position: [0, 0, 0],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }), React.createElement(Box, {\n    position: [1, 0, 1],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }), React.createElement(Box, {\n    position: [2, 1, 5],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }), React.createElement(Box, {\n    position: [0, 0, 6],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }), React.createElement(Box, {\n    position: [-1, 1, 8],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }), React.createElement(Box, {\n    position: [-2, 2, 13],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }), React.createElement(Box, {\n    position: [2, -1, 13],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }), !showPlane && React.createElement(Box, {\n    position: [0.5, 1.0, 20],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  })));\n}\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 72\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["C:/Users/NehaBadhan/Desktop/RealTime/Mount/src/Components/GroupTransformation.js"],"names":["CANNON","ReactDOM","React","useEffect","useState","Canvas","useCannon","Provider","Plane","position","ref","mass","body","addShape","set","Box","Vec3","App","showPlane","setTimeout","render","document","getElementById"],"mappings":"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","sourcesContent":["/** POC for three-fiber and cannon (a 3d physics lib)\r\n *\r\n *  useCannon is a custom hook that lets you link a physics body to a threejs\r\n *  mesh with zero effort. It will automatically update the mesh with the\r\n *  correct positioning.\r\n *\r\n *  When components with useCannon mount they are known to cannons world, when\r\n *  they unmount, they'll remove themselves from physics processing.\r\n *\r\n *  Check out three-fiber here: https://github.com/drcmda/react-three-fiber\r\n */\r\n\r\nimport * as CANNON from 'cannon'\r\nimport ReactDOM from 'react-dom'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Canvas } from 'react-three-fiber'\r\nimport { useCannon, Provider } from './useCannon'\r\nimport './styles.css'\r\n\r\nfunction Plane({ position }) {\r\n  // Register plane as a physics body with zero mass\r\n  const ref = useCannon({ mass: 0 }, body => {\r\n    body.addShape(new CANNON.Plane())\r\n    body.position.set(...position)\r\n  })\r\n  return (\r\n    <mesh ref={ref} receiveShadow>\r\n      <planeBufferGeometry attach=\"geometry\" args={[1000, 1000]} />\r\n      <meshPhongMaterial attach=\"material\" color=\"#272727\" />\r\n    </mesh>\r\n  )\r\n}\r\n\r\nfunction Box({ position }) {\r\n  // Register box as a physics body with mass\r\n  const ref = useCannon({ mass: 100000 }, body => {\r\n    body.addShape(new CANNON.Box(new CANNON.Vec3(1, 1, 1)))\r\n    body.position.set(...position)\r\n  })\r\n  return (\r\n    <mesh ref={ref} castShadow receiveShadow>\r\n      <boxGeometry attach=\"geometry\" args={[2, 2, 2]} />\r\n      <meshStandardMaterial attach=\"material\" />\r\n    </mesh>\r\n  )\r\n}\r\n\r\nexport default function App() {\r\n  const [showPlane, set] = useState(true)\r\n  // When React removes (unmounts) the upper plane after 5 sec, objects should drop ...\r\n  // This may seem like magic, but as the plane unmounts it removes itself from cannon and that's that\r\n  useEffect(() => void setTimeout(() => set(false), 5000), [])\r\n  return (\r\n    <Canvas className=\"main\" shadowMap camera={{ position: [0, 0, 15] }}>\r\n      <ambientLight intensity={0.5} />\r\n      <spotLight intensity={0.6} position={[30, 30, 50]} angle={0.2} penumbra={1} castShadow />\r\n      <Provider>\r\n        <Plane position={[0, 0, -10]} />\r\n        {showPlane && <Plane position={[0, 0, 0]} />}\r\n        <Box position={[1, 0, 1]} />\r\n        <Box position={[2, 1, 5]} />\r\n        <Box position={[0, 0, 6]} />\r\n        <Box position={[-1, 1, 8]} />\r\n        <Box position={[-2, 2, 13]} />\r\n        <Box position={[2, -1, 13]} />\r\n        {!showPlane && <Box position={[0.5, 1.0, 20]} />}\r\n      </Provider>\r\n    </Canvas>\r\n  )\r\n}\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n"]},"metadata":{},"sourceType":"module"}